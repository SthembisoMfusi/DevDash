// This is the Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  githubId  Int      @unique
  username  String
  email     String?
  name      String?
  avatarUrl String?
  githubAccessToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects        Project[]
  assignedIssues  Issue[] @relation("IssueAssignee")
  createdIssues   Issue[] @relation("IssueCreator")
  comments        Comment[]
  issueTemplates  IssueTemplate[]

  @@map("users")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     Int
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  repositories GitHubRepository[]
  issues      Issue[]
  milestones  Milestone[]
  templates   IssueTemplate[]

  @@map("projects")
}

model GitHubRepository {
  id          Int      @id @default(autoincrement())
  owner       String   // GitHub username/org
  name        String   // Repository name
  fullName    String   // owner/name
  description String?
  private     Boolean  @default(false)
  htmlUrl     String
  cloneUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  branches  Branch[]
  pullRequests PullRequest[]

  @@unique([projectId, fullName])
  @@map("github_repositories")
}

model Issue {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      IssueStatus @default(TODO)
  priority    Priority @default(MEDIUM)
  storyPoints Int?
  labels      String[] // Array of label strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId   Int
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId   Int
  creator     User    @relation("IssueCreator", fields: [creatorId], references: [id])
  assigneeId Int?
  assignee    User?   @relation("IssueAssignee", fields: [assigneeId], references: [id])
  milestoneId Int?
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  parentId    Int?
  parent      Issue?  @relation("IssueHierarchy", fields: [parentId], references: [id])
  subtasks    Issue[] @relation("IssueHierarchy")
  comments    Comment[]
  branches    Branch[]
  pullRequests PullRequest[]

  @@map("issues")
}

model Milestone {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  issues    Issue[]

  @@map("milestones")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId Int
  author   User  @relation(fields: [authorId], references: [id])
  issueId  Int
  issue    Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model IssueTemplate {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isBase      Boolean  @default(false) // Base templates vs custom user templates
  fields      Json     // Template field definitions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId Int
  creator   User     @relation(fields: [creatorId], references: [id])

  @@map("issue_templates")
}

model Branch {
  id          Int      @id @default(autoincrement())
  name        String
  sha         String   // Latest commit SHA
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  repositoryId Int
  repository   GitHubRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  issueId      Int?
  issue        Issue?           @relation(fields: [issueId], references: [id])

  @@unique([repositoryId, name])
  @@map("branches")
}

model PullRequest {
  id          Int      @id @default(autoincrement())
  number      Int
  title       String
  state       PullRequestState
  htmlUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  repositoryId Int
  repository   GitHubRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  issueId      Int?
  issue        Issue?           @relation(fields: [issueId], references: [id])

  @@unique([repositoryId, number])
  @@map("pull_requests")
}

// Enums
enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PullRequestState {
  OPEN
  CLOSED
  MERGED
}
