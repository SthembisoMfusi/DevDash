generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  username          String    @unique
  password          String
  name              String?
  bio               String?
  avatarUrl         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // GitHub linking (optional)
  githubId          Int?      @unique
  githubUsername    String?
  githubAccessToken String?
  githubLinkedAt    DateTime?
  lastGithubSync    DateTime?

  // Relations
  projects          Project[]
  assignedIssues    Issue[]         @relation("IssueAssignee")
  createdIssues     Issue[]         @relation("IssueCreator")
  comments          Comment[]
  issueTemplates    IssueTemplate[]

  @@index([email])
  @@index([username])
  @@index([githubId])
  @@map("users")
}

model WebhookEvent {
  id          Int      @id @default(autoincrement())
  eventType   String
  payload     Json
  processed   Boolean  @default(false)
  repositoryId Int?
  userId      Int?
  createdAt   DateTime @default(now())

  @@index([processed])
  @@index([eventType])
  @@index([createdAt])
  @@map("webhook_events")
}

model Project {
  id           Int                @id @default(autoincrement())
  name         String
  description  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  ownerId      Int
  repositories GitHubRepository[]
  templates    IssueTemplate[]
  issues       Issue[]
  milestones   Milestone[]
  owner        User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model GitHubRepository {
  id           Int           @id @default(autoincrement())
  owner        String
  name         String
  fullName     String
  description  String?
  private      Boolean       @default(false)
  htmlUrl      String
  cloneUrl     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  projectId    Int
  branches     Branch[]
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  pullRequests PullRequest[]

  @@unique([projectId, fullName])
  @@map("github_repositories")
}

model Issue {
  id           Int           @id @default(autoincrement())
  title        String
  description  String?
  status       IssueStatus   @default(TODO)
  priority     Priority      @default(MEDIUM)
  storyPoints  Int?
  labels       String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  projectId    Int
  creatorId    Int
  assigneeId   Int?
  milestoneId  Int?
  parentId     Int?
  branches     Branch[]
  comments     Comment[]
  assignee     User?         @relation("IssueAssignee", fields: [assigneeId], references: [id])
  creator      User          @relation("IssueCreator", fields: [creatorId], references: [id])
  milestone    Milestone?    @relation(fields: [milestoneId], references: [id])
  parent       Issue?        @relation("IssueHierarchy", fields: [parentId], references: [id])
  subtasks     Issue[]       @relation("IssueHierarchy")
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  pullRequests PullRequest[]

  @@map("issues")
}

model Milestone {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   Int
  issues      Issue[]
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  issueId   Int
  author    User     @relation(fields: [authorId], references: [id])
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model IssueTemplate {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isBase      Boolean  @default(false)
  fields      Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   Int?
  creatorId   Int
  creator     User     @relation(fields: [creatorId], references: [id])
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("issue_templates")
}

model Branch {
  id           Int              @id @default(autoincrement())
  name         String
  sha          String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  repositoryId Int
  issueId      Int?
  issue        Issue?           @relation(fields: [issueId], references: [id])
  repository   GitHubRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([repositoryId, name])
  @@map("branches")
}

model PullRequest {
  id           Int              @id @default(autoincrement())
  number       Int
  title        String
  state        PullRequestState
  htmlUrl      String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  repositoryId Int
  issueId      Int?
  issue        Issue?           @relation(fields: [issueId], references: [id])
  repository   GitHubRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([repositoryId, number])
  @@map("pull_requests")
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PullRequestState {
  OPEN
  CLOSED
  MERGED
}
